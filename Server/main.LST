C51 COMPILER V7.06   MAIN                                                                  09/06/2016 14:31:38 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: E:\Keil2\C51\BIN\C51.EXE main.c BROWSE NOAREGS DEBUG OBJECTEXTEND

stmt level    source

   1          #include "main.h"
   2          
   3          /******************************
   4          微控电子 www.mcuc.cn
   5          modbus RTU 的C51程序 
   6          单片机89S52
   7          通信波特率 9600 8位数据 1位停止位 偶校验 485通位接口
   8          单片机控制板地址 localAddr(变量)
   9          通信可设置数据的地址：
  10          字地址 0 - 255 (只取16位的低8位)
  11          位地址 0 - 255 (只取16位的低8位)
  12          *******************************/
  13          
  14          uint32  dwTickCount,dwIntTick;  //时钟
  15          uint8   idata sendBuf[16],receBuf[16]; //发送接收缓冲区
  16          uint8   idata checkoutError;    // ==2 偶校验错  
  17          uint8   idata receTimeOut;              //接收超时
  18          uint8   idata c10ms;                    //10ms 计时
  19          bit             b1ms,bt1ms,b10ms,bt10ms,b100ms,bt100ms; //定时标志位
  20          uint8   idata clientErrors[16];
  21          
  22          
  23          
  24          
  25          #define SERVER_ADDR 0
  26          #define ACTION_GET 0x1     //获取状态
  27          
  28          //#define CLIENT_ADDR_START  7
  29          //#define CLIENT_ADDR_END 8
  30          
  31          //一期
  32          //const uint8 clientids[]={1,2,3,4,5,6,10,12};
  33          //const uint8 CLIENTCOUNT = 8;
  34          
  35          //二期
  36          //const uint8  clientids[]={30,31,32  };
  37          
  38          const uint8  clientids[]={40,41 };
  39          
  40          
  41          const uint8 CLIENTCOUNT = 2;
  42          
  43          
  44          uint8 curClientAddr ; 
  45          
  46          uint8 lastRecvFlag;
  47          
  48          uint8 h232Mode;
  49          
  50          uint8 nRetryCount;
  51          
  52          
  53          #define MAX_RETRYCOUNT 8
  54          
  55          
C51 COMPILER V7.06   MAIN                                                                  09/06/2016 14:31:38 PAGE 2   

  56          
  57                                                                                                                                                          
  58          // 串行中断程序
  59          void commIntProc() interrupt 4
  60          {
  61   1              if(TI)
  62   1                      {
  63   2                              TI = 0; 
  64   2                              if(sendPosi < sendCount) 
  65   2                              {
  66   3                                      sendPosi++;
  67   3                                      ACC = sendBuf[sendPosi];
  68   3                                      TB8 = P;        //加上校验位
  69   3                                      SBUF = sendBuf[sendPosi];
  70   3      //                              bSendLED = !bSendLED;
  71   3                              }
  72   2                              else
  73   2                              {
  74   3                                      SetSendFlag(0);                    //发送完后将485置于接收状态
  75   3                                      receCount = 0;   //清接收地址偏移寄存器
  76   3                                      checkoutError = 0;
  77   3      //                              bSendLED = 1;
  78   3                              }
  79   2                      }
  80   1                      else if(RI)
  81   1                      {
  82   2                              RI = 0;
  83   2                              receTimeOut = 10;    //通讯超时值
  84   2                              receBuf[receCount] = SBUF;
  85   2                              ACC = receBuf[receCount];
  86   2                              if(P != RB8)
  87   2                                      checkoutError = 2;      //偶校验出错
  88   2                              receCount++;          //接收地址偏移寄存器加1
  89   2                              receCount &= 0x0f;    //最多一次只能接收16个字节
  90   2                      //      bSendLED = !bSendLED;
  91   2                      //      if(      receCount == 16)
  92   2                      //               bSendLED = 0;
  93   2      //                      bSendLED = 0;
  94   2                      }
  95   1      
  96   1      
  97   1      
  98   1      }   // void CommIntProc()
  99          
 100          //定时器0 1ms 中断
 101          void timer0IntProc() interrupt 1
 102          {
 103   1              TL0 = TIMER_LOW; 
 104   1          TH0 = TIMER_HIGHT;
 105   1          dwIntTick++;
 106   1              bt1ms = 1;
 107   1          c10ms++;
 108   1          if(c10ms >= 10) 
 109   1          {
 110   2              c10ms = 0;      //10ms计时器清零
 111   2              bt10ms = 1;
 112   2          }
 113   1      
 114   1      
 115   1               if(c10ms %3 == 0 )
 116   1         {
 117   2                      WDT_CONTR=0x35; 
C51 COMPILER V7.06   MAIN                                                                  09/06/2016 14:31:38 PAGE 3   

 118   2                      
 119   2         }
 120   1      
 121   1      }   // void Timer0IntProc()
 122          
 123          //外部中断0
 124          void intEx0Proc(void) interrupt 0
 125          {
 126   1      
 127   1      }
 128          
 129          //计数器1中断
 130          void counter1IntProc(void) interrupt 3 using 1
 131          {
 132   1      
 133   1      }
 134          
 135          
 136          void SetClientState(uint8 client,uint8 err,uint8 state,uint16 fHumi,uint16 fTempl)
 137          {
 138   1              uint8 i,index;
 139   1              uint8 * pH = (uint8*)&    fHumi;
 140   1              uint8 * pT = (uint8*)&    fTempl;
 141   1      
 142   1      //      bSignLED =       !bSignLED;
 143   1      
 144   1              index = client%8;
 145   1      
 146   1      //      if(client>16) 
 147   1      //              return;
 148   1      
 149   1              //获取客户端的错误存储位置
 150   1              if(err == 0)
 151   1              {
 152   2                      //没有错误
 153   2                      clientErrors[index] = 0;
 154   2              }
 155   1              else
 156   1              {
 157   2                      clientErrors[index] ++;
 158   2                      if(clientErrors[index]>=3)
 159   2                      {
 160   3                              clientErrors[index] = 0;        
 161   3                      }
 162   2                      else
 163   2                      {
 164   3                              //不登记此次错误
 165   3                              return;
 166   3                      }       
 167   2              }       
 168   1      
 169   1      
 170   1              
 171   1      
 172   1      
 173   1              switch( index) //20130927 调整  ,原来的代码 client%8 会把8丢掉 
 174   1              {
 175   2                      case 1:
 176   2                              bClient = (state == 1 &&  err == 0)?0:1;
 177   2                              break;
 178   2                      case 2:
 179   2                              bClient2 = (state == 1 &&  err == 0)?0:1;
C51 COMPILER V7.06   MAIN                                                                  09/06/2016 14:31:38 PAGE 4   

 180   2                              break;
 181   2                      case 3:
 182   2                              bClient3 = (state == 1 &&  err == 0)?0:1;
 183   2                              break;
 184   2                      case 4:
 185   2                              bClient4 = (state == 1 &&  err == 0)?0:1;
 186   2                              break;
 187   2                      case 5:
 188   2                              bClient5 = (state == 1 &&  err == 0)?0:1;
 189   2                              break;
 190   2                      case 6:
 191   2                              bClient6 = (state == 1 &&  err == 0)?0:1;
 192   2                              break;
 193   2                      case 7:
 194   2                              bClient7 = (state == 1 &&  err == 0)?0:1;
 195   2                              break;
 196   2                      case 0:
 197   2                              bClient8 = (state == 1 &&  err == 0)?0:1;
 198   2                              break;
 199   2                              
 200   2      
 201   2      
 202   2              /*                      case CLIENT_ADDR_START:
 203   2                              bClient7 = (state == 1 &&  err == 0)?0:1;
 204   2                              break;
 205   2                      case CLIENT_ADDR_START+1:
 206   2                              bClient8 = (state == 1 &&  err == 0)?0:1;
 207   2                              break;
 208   2      
 209   2      
 210   2                      case CLIENT_ADDR_START:
 211   2                              bClient = (state == 1 &&  err == 0)?0:1;
 212   2                              break;
 213   2                      case CLIENT_ADDR_START+1:
 214   2                              bClient2 = (state == 1 &&  err == 0)?0:1;
 215   2                              break;
 216   2                      case CLIENT_ADDR_START+2:
 217   2                              bClient3 = (state == 1 &&  err == 0)?0:1;
 218   2                              break;
 219   2                      case CLIENT_ADDR_START+3:
 220   2                              bClient4 = (state == 1 &&  err == 0)?0:1;
 221   2                              break;
 222   2                      case CLIENT_ADDR_START+4:
 223   2                              bClient5 = (state == 1 &&  err == 0)?0:1;
 224   2                              break;
 225   2                      case CLIENT_ADDR_START+5:
 226   2                              bClient6 = (state == 1 &&  err == 0)?0:1;
 227   2                              break;
 228   2                      case CLIENT_ADDR_START+6:
 229   2                              bClient7 = (state == 1 &&  err == 0)?0:1;
 230   2                              break;
 231   2                      case CLIENT_ADDR_START+7:
 232   2                              bClient8 = (state == 1 &&  err == 0)?0:1;
 233   2                              break;
 234   2                              */
 235   2                      default:
 236   2                              break;
 237   2              }
 238   1      
 239   1              h232Mode = 1;
 240   1              bSwitchLed = 1;
 241   1      
C51 COMPILER V7.06   MAIN                                                                  09/06/2016 14:31:38 PAGE 5   

 242   1              sendBuf[0] = 'A';
 243   1              sendBuf[1] = 'B';
 244   1              sendBuf[2] = 'C';
 245   1               
 246   1              sendBuf[3] =  client;
 247   1              sendBuf[4] =  err;
 248   1              
 249   1              sendBuf[5] =  state;
 250   1      
 251   1              sendBuf[6] =  (uint8)( fHumi/1000) ;
 252   1              sendBuf[7] = (uint8)( fHumi%1000/100) ;
 253   1              sendBuf[8] = (uint8)( fHumi%100/10) ;
 254   1              sendBuf[9] =  (uint8)( fHumi%10) ;
 255   1      
 256   1      
 257   1              
 258   1              sendBuf[10] =  (uint8)( fTempl/1000) ;
 259   1              sendBuf[11] =  (uint8)( fTempl%1000/100) ;
 260   1              sendBuf[12] =  (uint8)( fTempl%100/10) ;
 261   1              sendBuf[13] = (uint8)( fTempl%10) ;
 262   1      
 263   1              sendBuf[14] = 'D';
 264   1              sendBuf[15] = 'E';
 265   1      
 266   1              //暂停串口中断
 267   1              ES = 0;
 268   1      
 269   1              for( i=0;i<16;i++ )
 270   1              {
 271   2                      ACC = sendBuf[i];
 272   2                      TB8 = P;        //加上校验位
 273   2                      SBUF = sendBuf[i];
 274   2                      while(TI==0);
 275   2                      TI=0;
 276   2              }
 277   1      
 278   1              //打开串口中断
 279   1              ES = 1;
 280   1              bSwitchLed = 0;
 281   1      }
 282          
 283          
 284          //初始化串口
 285          void initUart(void)
 286          {
 287   1              h232Mode = 0;
 288   1              bSwitchLed =0;
 289   1              //T2 用于波特率 9600
 290   1              T2CON = 0x30;
 291   1              RCAP2H = 0xff;
 292   1              RCAP2L = 0xb8;
 293   1              TR2 = 1;
 294   1      
 295   1              //偶校验        
 296   1              //串口工作方式3，11UART                                 
 297   1              SCON = 0xd0;
 298   1          PCON = 0;
 299   1          ES = 1;
 300   1      
 301   1      
 302   1      }//void initUart(void)
 303          
C51 COMPILER V7.06   MAIN                                                                  09/06/2016 14:31:38 PAGE 6   

 304          //定时处理
 305          void timeProc(void)
 306          {
 307   1              static uint8 c200ms;
 308   1      
 309   1         // bWatchDog = ~ bWatchDog;    //看门狗取反
 310   1              b1ms = 0;
 311   1              b10ms = 0;
 312   1              b100ms = 0;
 313   1              
 314   1              ET0 = 0;
 315   1              dwTickCount = dwIntTick;
 316   1              ET0 = 1;
 317   1      
 318   1              if(bt1ms)
 319   1              {
 320   2                      bt1ms = 0;
 321   2                      b1ms = 1;
 322   2      
 323   2              if(receTimeOut>0)
 324   2              {
 325   3                  receTimeOut--;
 326   3                  if(receTimeOut==0 && receCount>0)   //判断通讯接收是否超时
 327   3                  {
 328   4                                      SetSendFlag(0); //将485置为接收状态
 329   4                                  receCount = 0;      //将接收地址偏移寄存器清零
 330   4                                      checkoutError = 0;
 331   4                  }
 332   3              }
 333   2              }
 334   1              
 335   1              if(bt100ms)
 336   1              {
 337   2                      bt100ms = 0;
 338   2                      b100ms = 1;
 339   2              }
 340   1          if(bt10ms)      //判断中断10ms标志位是否1
 341   1          {
 342   2              bt10ms = 0;     //清中断10ms标志位
 343   2                      b10ms = 1;
 344   2      
 345   2              c200ms++;                   //200ms计时器加1
 346   2              if(c200ms >= 200)            //判断是否计时到2000ms
 347   2              {
 348   3                              bRunLED = !bRunLED;
 349   3                  c200ms = 0;             //清200ms计时器
 350   3                              
 351   3              }
 352   2      
 353   2      
 354   2                      if(c200ms % 8 == 0 && (bSwitchLed == 0))  //100毫秒做一次
 355   2                      {
 356   3                              if(curClientAddr!= 0 && lastRecvFlag == 0)
 357   3                              {
 358   4                                      //上次发出的包没有收到
 359   4                                      nRetryCount ++ ;
 360   4                                      if(       nRetryCount >=   MAX_RETRYCOUNT)
 361   4                                      {
 362   5                                              //超过最大的重试次数
 363   5                                              SetClientState( clientids[curClientAddr-1],1,0,0,0);
 364   5                                              lastRecvFlag = 1;
 365   5      
C51 COMPILER V7.06   MAIN                                                                  09/06/2016 14:31:38 PAGE 7   

 366   5                                              //检查下一个节点
 367   5                                              curClientAddr ++;
 368   5                                              nRetryCount = 0; //重新开始
 369   5                                      }
 370   4                              }
 371   3                              else
 372   3                              {
 373   4                                      if(curClientAddr!=0)
 374   4                                              curClientAddr ++;
 375   4                                      nRetryCount = 0; //重新开始
 376   4                              }
 377   3                      
 378   3              
 379   3                                      if(curClientAddr == 0)
 380   3                                              curClientAddr =  1;
 381   3                                      if(      curClientAddr >  CLIENTCOUNT  )
 382   3                                              curClientAddr =  1;
 383   3      
 384   3                              sendBuf[0] =  clientids[curClientAddr-1];
 385   3                                      sendBuf[1] =  ACTION_GET;
 386   3                                      bSwitchLed = 0;
 387   3                                      h232Mode =0;
 388   3                                      lastRecvFlag = 0;
 389   3                                      sendCount = 2;
 390   3                                      beginSend();
 391   3                      }        
 392   2          }
 393   1      }   // void TimerProc(void)
 394          
 395          
 396          //初始化中断
 397          void initInt(void)
 398          {
 399   1              /*T1 为计数器 T0 为计时器 ，使用工作方式2，使用TH与TL作为寄存器*/
 400   1              TMOD = 0x51;
 401   1      
 402   1              //初始化定时器 0 开始值
 403   1              TH0 = TIMER_HIGHT;
 404   1              TL0 = TIMER_LOW;
 405   1              TR0 = 1;        
 406   1          ET0 = 1;
 407   1              TH1 = 0;                        //9600
 408   1          TL1 = 0;
 409   1              TR1 = 0;                        //定时器1用于计数定时器2用于波特
 410   1      
 411   1              ET1 = 1;
 412   1              //PT1 = 1;
 413   1      
 414   1              IT0 = 1;        
 415   1          IT1 = 1;
 416   1              EX0 = 0;        
 417   1              PX0 = 1;
 418   1          EX1 = 0;
 419   1      
 420   1              initUart();
 421   1      
 422   1              //打开全部中断
 423   1              EA = 1;         
 424   1      }   // void initInt(void)
 425          
 426          //初始化
 427          void initProg(void)
C51 COMPILER V7.06   MAIN                                                                  09/06/2016 14:31:38 PAGE 8   

 428          {       
 429   1              initInt();
 430   1              SetSendFlag(0); //将485置为接收状态
 431   1      }
 432          
 433          void main(void)
 434          {
 435   1               uint8 i;
 436   1      
 437   1              initProg();
 438   1      
 439   1              bClient = 1;
 440   1              bClient2 = 1;
 441   1              bClient3 = 1;
 442   1              bClient4 = 1;
 443   1              bClient5 = 1;
 444   1              bClient6 = 1;
 445   1              bClient7 = 1;
 446   1              bClient8 = 1;
 447   1                                                                      
 448   1      
 449   1              for(i = 0;i<16;i++)
 450   1              {
 451   2                      clientErrors[i] = 0;
 452   2              }
 453   1      
 454   1      
 455   1              //喂狗
 456   1              WDT_CONTR=0x35; 
 457   1      
 458   1      
 459   1              bRunLED  = 0;
 460   1              for(  i = 0;i<16;i++)
 461   1              {
 462   2                      sendBuf[i]= 0;  
 463   2              }
 464   1              receCount = 0;
 465   1      //      bSendLED = 1;
 466   1      
 467   1              SetSendFlag(0); //将485置为接收状态
 468   1              curClientAddr = 0;
 469   1              lastRecvFlag = 0;
 470   1              h232Mode = 0;
 471   1              bSwitchLed =0;
 472   1              nRetryCount = 0;
 473   1      
 474   1              while(1)
 475   1              {
 476   2                      timeProc();
 477   2                      if(     receCount == 12)
 478   2                      {
 479   3                              if(     receBuf[0] ==      SERVER_ADDR && checkoutError == 0)
 480   3                              {
 481   4                                      if(     (curClientAddr!=0)&& (receBuf[1] ==     clientids[curClientAddr-1]))
 482   4                                      {
 483   5                                              lastRecvFlag = 1;
 484   5                                              switch(  receBuf[2])
 485   5                                              {
 486   6                                                      case ACTION_GET:
 487   6                                                               {
 488   7                                                                      SetClientState( clientids[curClientAddr-1],0,receBuf[3],
 489   7                                                                               receBuf[4]*1000+          receBuf[5]*100+receBuf[6]*10+receBuf[7],
C51 COMPILER V7.06   MAIN                                                                  09/06/2016 14:31:38 PAGE 9   

 490   7                                                                                receBuf[8]*1000+         receBuf[9]*100+receBuf[10]*10+receBuf[11]);
 491   7                                                                      
 492   7                                                               }
 493   6                                                              break;
 494   6                                                      default:
 495   6                                                              break;
 496   6                                              }
 497   5      
 498   5                                      }
 499   4                                      
 500   4                              }
 501   3                              receCount = 0;
 502   3                              checkoutError = 0;
 503   3                      }
 504   2              }
 505   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1190    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     16      13
   IDATA SIZE       =     51    ----
   BIT SIZE         =      6    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
